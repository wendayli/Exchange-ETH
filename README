# ü¶Ñ SimpleDEX - Exchange Descentralizado con Pools de Liquidez

## üìå Descripci√≥n del Proyecto

Este proyecto implementa un **exchange descentralizado simple (DEX)** que permite intercambiar dos tokens ERC-20 utilizando el modelo **AMM de producto constante** \((x + dx)(y - dy) = xy\).

Se despliega en la red **Scroll Sepolia** e incluye contratos para los tokens y el DEX.

---

## üì¶ Contratos Incluidos

- `TokenA.sol`: Token ERC-20 simple llamado **TokenA** (s√≠mbolo: `TKA`).
- `TokenB.sol`: Token ERC-20 simple llamado **TokenB** (s√≠mbolo: `TKB`).
- `SimpleDEX.sol`: Contrato principal del DEX, que administra el pool y los intercambios.

---

## üöÄ Funcionalidades

- ‚úÖ Agregar liquidez al pool (solo el owner).
- ‚úÖ Retirar liquidez (solo el owner).
- ‚úÖ Intercambiar TokenA por TokenB.
- ‚úÖ Intercambiar TokenB por TokenA.
- ‚úÖ Consultar precios de los tokens.
- ‚úÖ Eventos emitidos para cada acci√≥n importante.

---

## üõ†Ô∏è Requisitos T√©cnicos

El contrato `SimpleDEX` incluye obligatoriamente las siguientes funciones p√∫blicas:

- `constructor(address _tokenA, address _tokenB)`
- `addLiquidity(uint256 amountA, uint256 amountB)`
- `swapAforB(uint256 amountAIn)`
- `swapBforA(uint256 amountBIn)`
- `removeLiquidity(uint256 amountA, uint256 amountB)`
- `getPrice(address _token)`

Y emite los siguientes eventos:

- `LiquidityAdded(...)`
- `LiquidityRemoved(...)`
- `Swapped(...)`

---

## üöÄ Gu√≠a Paso a Paso para Testing de SimpleDEX

### üîó Contratos Desplegados

| Contrato   | Direcci√≥n en Scroll Sepolia                                  |
|------------|--------------------------------------------------------------|
| TokenA     | `0x97eb14f0e0d46d1437234d2e49c42dac41edd1de`                  |
| TokenB     | `0x44a05c2ea3849d7aa869abb54dda433f2ba3a6a5`                  |
| SimpleDEX  | `0x0b77e6c7713c900e4e9bd4a6c7239cdd06012c69`                  |

---

### üß™ Tabla de Pruebas - Paso a Paso

| N¬∫  | Acci√≥n                                      | Funci√≥n Solidity / Descripci√≥n                                                                                       |
|-----|---------------------------------------------|------------------------------------------------------------------------------------------------------------------------|
| 1   | **Desplegar TokenA**                        | `TokenA(1000)` ‚Äì Crea 1000 tokens (con 18 decimales).                                                                 |
| 2   | **Desplegar TokenB**                        | `TokenB(1000)` ‚Äì Igual que arriba.                                                                                    |
| 3   | **Desplegar SimpleDEX**                     | `SimpleDEX(0x97eb14f0e0d46d1437234d2e49c42dac41edd1de, 0x44a05c2ea3849d7aa869abb54dda433f2ba3a6a5)`                   |
| 4   | **Aprobar TokenA al DEX**                   | `approve(0x0b77e6c7713c900e4e9bd4a6c7239cdd06012c69, 100000000000000000000)` ‚Üí 100 TKA                                 |
| 5   | **Aprobar TokenB al DEX**                   | `approve(0x0b77e6c7713c900e4e9bd4a6c7239cdd06012c69, 100000000000000000000)` ‚Üí 100 TKB                                 |
| 6   | **Agregar Liquidez (solo owner)**           | `addLiquidity(100000000000000000000, 100000000000000000000)` ‚Äì Agrega 100 TKA y 100 TKB                               |
| 7   | **Intercambiar TokenA por TokenB**          | `swapAforB(10000000000000000000)` ‚Äì Intercambia 10 TKA                                                                |
| 8   | **Intercambiar TokenB por TokenA**          | `swapBforA(5000000000000000000)` ‚Äì Intercambia 5 TKB                                                                  |
| 9   | **Consultar precio de TokenA en TKB**       | `getPrice(0x97eb14f0e0d46d1437234d2e49c42dac41edd1de)` ‚Äì Precio de TKA en t√©rminos de TKB                             |
| 10  | **Consultar precio de TokenB en TKA**       | `getPrice(0x44a05c2ea3849d7aa869abb54dda433f2ba3a6a5)` ‚Äì Precio de TKB en t√©rminos de TKA                             |
| 11  | **Retirar Liquidez (solo owner)**           | `removeLiquidity(10000000000000000000, 10000000000000000000)` ‚Äì Retira 10 TKA y 10 TKB del pool                        |

---

### üìÇ Smart Contracts Utilizados

| Archivo Solidity  | Prop√≥sito                            |
|-------------------|--------------------------------------|
| `TokenA.sol`      | Token ERC-20 simple con 18 decimales |
| `TokenB.sol`      | Segundo token ERC-20 simple          |
| `SimpleDEX.sol`   | Contrato de Exchange con AMM x*y=k   |

---

### üõ†Ô∏è Herramientas Recomendadas

- **Remix IDE** (https://remix.ethereum.org)
- **MetaMask** con Scroll Sepolia configurado
- **Ether desde Scroll Faucet**: [https://scroll.io/faucet](https://scroll.io/faucet)

---

### ‚úÖ Recomendaci√≥n

Antes de probar, aseg√∫rate de tener:
- Conectado MetaMask a Scroll Sepolia
- Fondos de testnet ETH
- Tokens aprobados desde la cuenta que act√∫a como `owner`

